import {
  defaultTransformer,
  encode,
  isNotFound,
  isPlainObject,
  isRedirect
} from "./chunk-ZKOPJOOL.js";
import "./chunk-NQR6T26J.js";
import "./chunk-Y7HDJZ2Y.js";
import "./chunk-IGC3SCDK.js";

// node_modules/.pnpm/@tanstack+start@1.87.11_@types+node@22.10.2_ioredis@5.4.1_jiti@2.4.1_react-dom@19.0.0_react@1_zolwch42o5675pyzhksiy6nnka/node_modules/@tanstack/start/dist/esm/client-runtime/fetcher.js
async function fetcher(base, args, handler) {
  var _a;
  const _first = args[0];
  if (isPlainObject(_first) && _first.method) {
    const first = _first;
    const type = first.data instanceof FormData ? "formData" : "payload";
    const headers = new Headers({
      ...type === "payload" ? {
        "content-type": "application/json",
        accept: "application/json"
      } : {},
      ...first.headers instanceof Headers ? Object.fromEntries(first.headers.entries()) : first.headers || {}
    });
    if (first.method === "GET") {
      const encodedPayload = encode({
        payload: defaultTransformer.stringify({
          data: first.data,
          context: first.context
        })
      });
      if (encodedPayload) base += `&${encodedPayload}`;
    }
    const request2 = new Request(base, {
      method: first.method,
      headers,
      ...getFetcherRequestOptions(first)
    });
    const handlerResponse = await handler(request2);
    const response2 = await handleResponseErrors(handlerResponse);
    if ((_a = response2.headers.get("content-type")) == null ? void 0 : _a.includes("application/json")) {
      const text2 = await response2.text();
      const json = text2 ? defaultTransformer.parse(text2) : void 0;
      if (isRedirect(json) || isNotFound(json)) {
        throw json;
      }
      return json;
    }
    return response2;
  }
  const request = new Request(base, {
    method: "POST",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    body: JSON.stringify(args)
  });
  const response = await handleResponseErrors(await handler(request));
  const contentType = response.headers.get("content-type");
  const text = await response.text();
  if (contentType && contentType.includes("application/json")) {
    return text ? JSON.parse(text) : void 0;
  } else {
    return text;
  }
}
function getFetcherRequestOptions(opts) {
  if (opts.method === "POST") {
    if (opts.data instanceof FormData) {
      opts.data.set("__TSR_CONTEXT", defaultTransformer.stringify(opts.context));
      return {
        body: opts.data
      };
    }
    return {
      body: defaultTransformer.stringify({
        data: opts.data ?? null,
        context: opts.context
      })
    };
  }
  return {};
}
async function handleResponseErrors(response) {
  if (!response.ok) {
    const contentType = response.headers.get("content-type");
    const isJson = contentType && contentType.includes("application/json");
    const body = await (async () => {
      if (isJson) {
        return await response.json();
      }
      return await response.text();
    })();
    const message = `Request failed with status ${response.status}`;
    if (isJson) {
      throw new Error(
        JSON.stringify({
          message,
          body
        })
      );
    } else {
      throw new Error(
        [message, `${JSON.stringify(body, null, 2)}`].join("\n\n")
      );
    }
  }
  return response;
}

// node_modules/.pnpm/@tanstack+start@1.87.11_@types+node@22.10.2_ioredis@5.4.1_jiti@2.4.1_react-dom@19.0.0_react@1_zolwch42o5675pyzhksiy6nnka/node_modules/@tanstack/start/dist/esm/client-runtime/getBaseUrl.js
function sanitizeBase(base) {
  if (!base) {
    throw new Error(
      "ðŸš¨ process.env.TSS_SERVER_BASE is required in start/client-runtime/getBaseUrl"
    );
  }
  return base.replace(/^\/|\/$/g, "");
}
function getBaseUrl(base, id, name) {
  return `${base}/${sanitizeBase(process.env.TSS_SERVER_BASE)}/?_serverFnId=${encodeURI(id)}&_serverFnName=${encodeURI(name)}`;
}

// node_modules/.pnpm/@tanstack+start@1.87.11_@types+node@22.10.2_ioredis@5.4.1_jiti@2.4.1_react-dom@19.0.0_react@1_zolwch42o5675pyzhksiy6nnka/node_modules/@tanstack/start/dist/esm/client-runtime/index.js
function createServerReference(_fn, id, name) {
  const base = getBaseUrl(window.location.origin, id, name);
  const proxyFn = (...args) => fetcher(base, args, fetch);
  return Object.assign(proxyFn, {
    url: base,
    filename: id,
    functionId: name
  });
}
export {
  createServerReference,
  fetcher
};
//# sourceMappingURL=@tanstack_start_client-runtime.js.map
